@layout LoginLayout
@page "/login"

@inject IAuthService authService
@inject NavigationManager navigationService
@inject SweetAlertService swal;

<EditForm Model="auth" OnValidSubmit="login">
    <div class="card">
        <div class="card-header">Acceder al Sistema</div>
        <div class="card-body">
            <div class="container">
                <div class="mb-3">
                    <label for="exampleInputEmail1" class="form-label">Email</label>
                    <InputText class="form-control" @bind-Value="@auth.user" aria-describedby="emailHelp" />
                    <div id="emailHelp" class="form-text">No compartiremos tu email con nadie mas.</div>
                </div>
                <div class="mb-3">
                    <label for="exampleInputPassword1" class="form-label">Contraseña</label>
                    <InputText type="password" class="form-control" @bind-Value="@auth.password" />
                </div>
                <button type="submit" class="btn btn-primary">Acceder</button>
            </div>
        </div>
    </div>

</EditForm>

@code {
    Auth auth;

    protected async override Task OnInitializedAsync() {
        auth = new Auth();
    }

    private async void login() {
        swal.ShowLoadingAsync();
        var response = await authService.login(auth);
        if (response.Id != 0) {
            Preferences.Remove(PreferencesModel._userPreferences);
            Preferences.Set(PreferencesModel._userPreferences, response.Id.ToString());

            string key = Preferences.Get(PreferencesModel._keyPreferences, "");
            swal.CloseAsync();            

            if (!String.IsNullOrEmpty(key) && await authService.isValidKey(key))
                navigationService.NavigateTo("/");
            else
                navigationService.NavigateTo("/key");
        } else {
            swal.FireAsync("Error", "Credenciales incorrectas", "error");
        }
    }
}
