@inject IOfficeService officeService;

<TelerikLoaderContainer Visible="@(offices == null)">
    <Template>
        <TelerikLoader Size="@ThemeConstants.Loader.Size.Large"
                       ThemeColor="@ThemeConstants.Loader.ThemeColor.Info"
                       Type="@LoaderType.InfiniteSpinner" />
        <div>
            <span><TelerikIcon Icon="information"></TelerikIcon></span>
            <span>Cargando oficinas</span>
        </div>
    </Template>
</TelerikLoaderContainer>

@if(offices != null) {
    <div class="col-12">
        <div class="row">
            @foreach (var office in offices) {
                <div class="col-md-6 col-sm-12">
                    <div class="card">
                        <div class="card-body">
                            <h5 class="card-title">@office.Name</h5>
                            <p class="card-text">@office.Coordenadas</p>
                            <button class="btn btn-primary" @onclick="OpenDialog">Visualizar</button>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
}
<TelerikRootComponent>
    <TelerikDialog @ref="DialogRef" @bind-Visible="_dialogVisible" Width="90%">
        <DialogContent>

                <TelerikMap @ref="MapRef" Zoom="17" Center="Center">
                    <MapLayers>
                        <MapLayer Type="@MapLayersType.Tile"
                                  Attribution="@Attribution"
                                  Subdomains="@Subdomains"
                                  UrlTemplate="@UrlTemplate">
                        </MapLayer>                    

                        <MapLayer Type="@MapLayersType.Marker"
                                  Data="@OfficeData"
                                  LocationField="@nameof(MarkerModel.LatLng)"
                                  TitleField="@nameof(MarkerModel.Address)">
                            <MapLayerMarkerSettings>
                                <MapLayerMarkerSettingsTooltip>
                                    <Template>
                                        @{
                                            var dataItem = context.DataItem as MarkerModel;
                                        }

                                        <div>@dataItem.Address</div>
                                    </Template>
                                </MapLayerMarkerSettingsTooltip>
                            </MapLayerMarkerSettings>
                        </MapLayer>                                        
                    </MapLayers>
                </TelerikMap>

        </DialogContent>
        <DialogButtons>
            <TelerikButton OnClick="@(() => { _dialogVisible = false; })">Close</TelerikButton>
        </DialogButtons>
    </TelerikDialog>
</TelerikRootComponent>

@code {
    TelerikDialog DialogRef;
    private bool _dialogVisible;
    TelerikMap MapRef { get; set; }

    public string[] Subdomains { get; set; } = new string[] { "a", "b", "c" };
    public string UrlTemplate { get; set; } = "https://#= subdomain #.tile.openstreetmap.org/#= zoom #/#= x #/#= y #.png";
    public string Attribution { get; set; } = "&copy; <a href='https://osm.org/copyright'>OpenStreetMap contributors</a>";
    public double[] Center { get; set; } = new double[] { -18.007963, -70.246915 };

    public List<MarkerModel> OfficeData { get; set; } = new List<MarkerModel>();
    List<OfficeModel> offices;
    bool LoaderVisible { get; set; } = true;

    protected override async Task OnInitializedAsync() {
        await Task.Delay(1000);
        offices = await officeService.getAll();

        InvokeAsync(StateHasChanged);
    }

    private async Task removeOffice(OfficeModel selectedOffice) {
        if(!await officeService.deleteOffice(selectedOffice.Id))
            return;

        offices = await officeService.getAll();
        await InvokeAsync(StateHasChanged);
    }

    private void OpenDialog() {
        OfficeData.Clear();
        foreach (var item in offices) {
            OfficeData.Add(new MarkerModel() {
                    LatLng = item.LatLng,
                    Address = item.Name,
                });
            Center = item.LatLng;
        }
        _dialogVisible = true;
    }
}
